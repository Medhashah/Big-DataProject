SortAggregate(key=[], functions=[first(if ((gid#449 = 0)) count(CASE WHEN (`Fiscal Year` IS NULL) THEN true END)#472L else null, true), first(if ((gid#449 = 0)) count(CASE WHEN (`Fiscal Year` IS NOT NULL) THEN true END)#474L else null, true), count(if ((gid#449 = 1)) `Fiscal Year`#450 else null), first(if ((gid#449 = 0)) count(`Fiscal Year_int`)#476L else null, true), first(if ((gid#449 = 0)) count(`Fiscal Year_real`)#478L else null, true), first(if ((gid#449 = 0)) count(`Fiscal Year_date`)#480L else null, true), first(if ((gid#449 = 0)) count(`Fiscal Year_text`)#482L else null, true), first(if ((gid#449 = 0)) max(`Fiscal Year_int`)#484 else null, true), first(if ((gid#449 = 0)) max(`Fiscal Year_real`)#486 else null, true), first(if ((gid#449 = 0)) max(`Fiscal Year_date`)#488 else null, true), first(if ((gid#449 = 0)) min(`Fiscal Year_int`)#490 else null, true), first(if ((gid#449 = 0)) min(`Fiscal Year_real`)#492 else null, true), first(if ((gid#449 = 0)) min(`Fiscal Year_date`)#494 else null, true), first(if ((gid#449 = 0)) avg(CAST(`Fiscal Year_int` AS BIGINT))#496 else null, true), first(if ((gid#449 = 0)) avg(CAST(`Fiscal Year_real` AS DOUBLE))#498 else null, true), first(if ((gid#449 = 0)) avg(CAST(`Fiscal Year_len` AS BIGINT))#500 else null, true), first(if ((gid#449 = 0)) stddev_samp(CAST(`Fiscal Year_int` AS DOUBLE))#510 else null, true), first(if ((gid#449 = 0)) stddev_samp(CAST(`Fiscal Year_real` AS DOUBLE))#520 else null, true), first(if ((gid#449 = 0)) count(CASE WHEN (`Number of Arrests` IS NULL) THEN true END)#522L else null, true), first(if ((gid#449 = 0)) count(CASE WHEN (`Number of Arrests` IS NOT NULL) THEN true END)#524L else null, true), count(if ((gid#449 = 2)) `Number of Arrests`#451 else null), first(if ((gid#449 = 0)) count(`Number of Arrests_int`)#526L else null, true), first(if ((gid#449 = 0)) count(`Number of Arrests_real`)#528L else null, true), first(if ((gid#449 = 0)) count(`Number of Arrests_date`)#530L else null, true), ... 12 more fields])
+- Exchange SinglePartition
   +- SortAggregate(key=[], functions=[partial_first(if ((gid#449 = 0)) count(CASE WHEN (`Fiscal Year` IS NULL) THEN true END)#472L else null, true), partial_first(if ((gid#449 = 0)) count(CASE WHEN (`Fiscal Year` IS NOT NULL) THEN true END)#474L else null, true), partial_count(if ((gid#449 = 1)) `Fiscal Year`#450 else null), partial_first(if ((gid#449 = 0)) count(`Fiscal Year_int`)#476L else null, true), partial_first(if ((gid#449 = 0)) count(`Fiscal Year_real`)#478L else null, true), partial_first(if ((gid#449 = 0)) count(`Fiscal Year_date`)#480L else null, true), partial_first(if ((gid#449 = 0)) count(`Fiscal Year_text`)#482L else null, true), partial_first(if ((gid#449 = 0)) max(`Fiscal Year_int`)#484 else null, true), partial_first(if ((gid#449 = 0)) max(`Fiscal Year_real`)#486 else null, true), partial_first(if ((gid#449 = 0)) max(`Fiscal Year_date`)#488 else null, true), partial_first(if ((gid#449 = 0)) min(`Fiscal Year_int`)#490 else null, true), partial_first(if ((gid#449 = 0)) min(`Fiscal Year_real`)#492 else null, true), partial_first(if ((gid#449 = 0)) min(`Fiscal Year_date`)#494 else null, true), partial_first(if ((gid#449 = 0)) avg(CAST(`Fiscal Year_int` AS BIGINT))#496 else null, true), partial_first(if ((gid#449 = 0)) avg(CAST(`Fiscal Year_real` AS DOUBLE))#498 else null, true), partial_first(if ((gid#449 = 0)) avg(CAST(`Fiscal Year_len` AS BIGINT))#500 else null, true), partial_first(if ((gid#449 = 0)) stddev_samp(CAST(`Fiscal Year_int` AS DOUBLE))#510 else null, true), partial_first(if ((gid#449 = 0)) stddev_samp(CAST(`Fiscal Year_real` AS DOUBLE))#520 else null, true), partial_first(if ((gid#449 = 0)) count(CASE WHEN (`Number of Arrests` IS NULL) THEN true END)#522L else null, true), partial_first(if ((gid#449 = 0)) count(CASE WHEN (`Number of Arrests` IS NOT NULL) THEN true END)#524L else null, true), partial_count(if ((gid#449 = 2)) `Number of Arrests`#451 else null), partial_first(if ((gid#449 = 0)) count(`Number of Arrests_int`)#526L else null, true), partial_first(if ((gid#449 = 0)) count(`Number of Arrests_real`)#528L else null, true), partial_first(if ((gid#449 = 0)) count(`Number of Arrests_date`)#530L else null, true), ... 12 more fields])
      +- SortAggregate(key=[`Fiscal Year`#450, `Number of Arrests`#451, gid#449], functions=[count(CASE WHEN (`Fiscal Year` IS NULL) THEN true END#452), count(CASE WHEN (`Fiscal Year` IS NOT NULL) THEN true END#453), count(`Fiscal Year_int`#454), count(`Fiscal Year_real`#455), count(`Fiscal Year_date`#456), count(`Fiscal Year_text`#457), max(`Fiscal Year_int`#454), max(`Fiscal Year_real`#455), max(`Fiscal Year_date`#456), min(`Fiscal Year_int`#454), min(`Fiscal Year_real`#455), min(`Fiscal Year_date`#456), avg(CAST(`Fiscal Year_int` AS BIGINT)#458L), avg(CAST(`Fiscal Year_real` AS DOUBLE)#459), avg(CAST(`Fiscal Year_len` AS BIGINT)#460L), stddev_samp(CAST(`Fiscal Year_int` AS DOUBLE)#461), stddev_samp(CAST(`Fiscal Year_real` AS DOUBLE)#459), count(CASE WHEN (`Number of Arrests` IS NULL) THEN true END#462), count(CASE WHEN (`Number of Arrests` IS NOT NULL) THEN true END#463), count(`Number of Arrests_int`#464), count(`Number of Arrests_real`#465), count(`Number of Arrests_date`#466), count(`Number of Arrests_text`#467), max(`Number of Arrests_int`#464), ... 10 more fields])
         +- *(3) Sort [`Fiscal Year`#450 ASC NULLS FIRST, `Number of Arrests`#451 ASC NULLS FIRST, gid#449 ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(`Fiscal Year`#450, `Number of Arrests`#451, gid#449, 200)
               +- SortAggregate(key=[`Fiscal Year`#450, `Number of Arrests`#451, gid#449], functions=[partial_count(CASE WHEN (`Fiscal Year` IS NULL) THEN true END#452), partial_count(CASE WHEN (`Fiscal Year` IS NOT NULL) THEN true END#453), partial_count(`Fiscal Year_int`#454), partial_count(`Fiscal Year_real`#455), partial_count(`Fiscal Year_date`#456), partial_count(`Fiscal Year_text`#457), partial_max(`Fiscal Year_int`#454), partial_max(`Fiscal Year_real`#455), partial_max(`Fiscal Year_date`#456), partial_min(`Fiscal Year_int`#454), partial_min(`Fiscal Year_real`#455), partial_min(`Fiscal Year_date`#456), partial_avg(CAST(`Fiscal Year_int` AS BIGINT)#458L), partial_avg(CAST(`Fiscal Year_real` AS DOUBLE)#459), partial_avg(CAST(`Fiscal Year_len` AS BIGINT)#460L), partial_stddev_samp(CAST(`Fiscal Year_int` AS DOUBLE)#461), partial_stddev_samp(CAST(`Fiscal Year_real` AS DOUBLE)#459), partial_count(CASE WHEN (`Number of Arrests` IS NULL) THEN true END#462), partial_count(CASE WHEN (`Number of Arrests` IS NOT NULL) THEN true END#463), partial_count(`Number of Arrests_int`#464), partial_count(`Number of Arrests_real`#465), partial_count(`Number of Arrests_date`#466), partial_count(`Number of Arrests_text`#467), partial_max(`Number of Arrests_int`#464), ... 10 more fields])
                  +- *(2) Sort [`Fiscal Year`#450 ASC NULLS FIRST, `Number of Arrests`#451 ASC NULLS FIRST, gid#449 ASC NULLS FIRST], false, 0
                     +- *(2) Expand [ArrayBuffer(null, null, 0, CASE WHEN isnull(Fiscal Year#10) THEN true END, CASE WHEN isnotnull(Fiscal Year#10) THEN true END, Fiscal Year_int#15, Fiscal Year_real#20, Fiscal Year_date#26, Fiscal Year_text#33, cast(Fiscal Year_int#15 as bigint), cast(Fiscal Year_real#20 as double), cast(Fiscal Year_len#40 as bigint), cast(Fiscal Year_int#15 as double), CASE WHEN isnull(Number of Arrests#11) THEN true END, CASE WHEN isnotnull(Number of Arrests#11) THEN true END, Number of Arrests_int#139, Number of Arrests_real#149, Number of Arrests_date#160, Number of Arrests_text#172, cast(Number of Arrests_int#139 as bigint), cast(Number of Arrests_real#149 as double), cast(Number of Arrests_len#184 as bigint), cast(Number of Arrests_int#139 as double)), ArrayBuffer(Fiscal Year#10, null, 1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null), ArrayBuffer(null, Number of Arrests#11, 2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)], [`Fiscal Year`#450, `Number of Arrests`#451, gid#449, CASE WHEN (`Fiscal Year` IS NULL) THEN true END#452, CASE WHEN (`Fiscal Year` IS NOT NULL) THEN true END#453, `Fiscal Year_int`#454, `Fiscal Year_real`#455, `Fiscal Year_date`#456, `Fiscal Year_text`#457, CAST(`Fiscal Year_int` AS BIGINT)#458L, CAST(`Fiscal Year_real` AS DOUBLE)#459, CAST(`Fiscal Year_len` AS BIGINT)#460L, CAST(`Fiscal Year_int` AS DOUBLE)#461, CASE WHEN (`Number of Arrests` IS NULL) THEN true END#462, CASE WHEN (`Number of Arrests` IS NOT NULL) THEN true END#463, `Number of Arrests_int`#464, `Number of Arrests_real`#465, `Number of Arrests_date`#466, `Number of Arrests_text`#467, CAST(`Number of Arrests_int` AS BIGINT)#468L, CAST(`Number of Arrests_real` AS DOUBLE)#469, CAST(`Number of Arrests_len` AS BIGINT)#470L, CAST(`Number of Arrests_int` AS DOUBLE)#471]
                        +- *(2) Project [Fiscal Year#10, Number of Arrests#11, pythonUDF0#572 AS Fiscal Year_int#15, pythonUDF1#573 AS Fiscal Year_real#20, pythonUDF2#574 AS Fiscal Year_date#26, pythonUDF4#576 AS Fiscal Year_text#33, length(pythonUDF4#576) AS Fiscal Year_len#40, pythonUDF5#577 AS Number of Arrests_int#139, pythonUDF6#578 AS Number of Arrests_real#149, pythonUDF7#579 AS Number of Arrests_date#160, pythonUDF9#581 AS Number of Arrests_text#172, length(pythonUDF9#581) AS Number of Arrests_len#184]
                           +- BatchEvalPython [get_int(Fiscal Year#10), get_real(Fiscal Year#10), get_datetime(Fiscal Year#10), get_text(Fiscal Year#10), get_text(Fiscal Year#10), get_int(Number of Arrests#11), get_real(Number of Arrests#11), get_datetime(Number of Arrests#11), get_text(Number of Arrests#11), get_text(Number of Arrests#11)], [Fiscal Year#10, Number of Arrests#11, pythonUDF0#572, pythonUDF1#573, pythonUDF2#574, pythonUDF3#575, pythonUDF4#576, pythonUDF5#577, pythonUDF6#578, pythonUDF7#579, pythonUDF8#580, pythonUDF9#581]
                              +- *(1) FileScan csv [Fiscal Year#10,Number of Arrests#11] Batched: false, Format: CSV, Location: InMemoryFileIndex[hdfs://dumbo/user/hm74/NYCOpenData/d4uz-6jaw.tsv.gz], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<Fiscal Year:string,Number of Arrests:string>